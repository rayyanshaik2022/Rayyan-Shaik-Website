<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>All Projects on Rayyan Shaik</title>
    <link>https://rayyanshaik.com/blog/</link>
    <description>Recent content in All Projects on Rayyan Shaik</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 07 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://rayyanshaik.com/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mathematical Expression Evaluator</title>
      <link>https://rayyanshaik.com/blog/calculator/</link>
      <pubDate>Wed, 07 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://rayyanshaik.com/blog/calculator/</guid>
      <description>Description This repository features 2 programs that can solve mathematical expressions. Both projects were planned and thought out before writing, and my partner, Andrew Diab, and I each wrote one implementation. The first one, under the subdirectory /Dijkstra was completed by Andrew Diab - this implements the Shunting-Yard Algorithm by Edsger Dijkstra, and the simpleSolve() method created by myself. I created the second implementation found under the subdirectory Recursive. This program contains a class which can solve unordered mathematical expressions folling PEMDAS (no brackets or parentheses) under the method simpleSolve().</description>
    </item>
    
    <item>
      <title>Velociraptor Bot</title>
      <link>https://rayyanshaik.com/blog/velociraptorbot/</link>
      <pubDate>Sun, 16 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://rayyanshaik.com/blog/velociraptorbot/</guid>
      <description>Description A multi-purpose discord bot to be used on a private server with my friends. This bot provides basic security for our server with an easily customizable verification system. Important e-learnig and virtual learning commands that can reply with my school&amp;rsquo;s schedule and per class zoom links. The bot can also join voice channels and play different sound effects stored as .mp3 files.
Github Repository The Github repository can be found here</description>
    </item>
    
    <item>
      <title>Simple Dungeon Game</title>
      <link>https://rayyanshaik.com/blog/simple-dungeon/</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://rayyanshaik.com/blog/simple-dungeon/</guid>
      <description>Description A showcase-esque project designed to demonstrate an improved understanding of sockets and client/network relationships. This was created in pure python with no game engines (such as Unity), everything from buttons, to servers, to the physics was created from scratch. This is not a complete game, but includes complete portions of one - a main menu screen, working (not much playable content) game, and a level editor. This project features complex gui components created from scratch, such as buttons and text boxes.</description>
    </item>
    
    <item>
      <title>Agar.io Clone</title>
      <link>https://rayyanshaik.com/blog/agario/</link>
      <pubDate>Sun, 19 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://rayyanshaik.com/blog/agario/</guid>
      <description>Description A complete, scalable clone of the popular web game, agar.io. This project was created purely in python, and utilizes the pygame (GUI) and sockets (web connection) libraries. There are 2 main files used to run code. The first is client.py, which runs the game itself. The second is server.py, which can be run on any network and can open a customizable &amp;ldquo;agar.io&amp;rdquo; server on any port. This game is playable online, and through local networks.</description>
    </item>
    
    <item>
      <title>Smart Rockets</title>
      <link>https://rayyanshaik.com/blog/smart-rockets/</link>
      <pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://rayyanshaik.com/blog/smart-rockets/</guid>
      <description>Description This program is a demonstration of a genetic algorithm, with the use of &amp;ldquo;rockets&amp;rdquo; drawn as rectangles. Each &amp;ldquo;rocket&amp;rdquo; has its own dna telling them random directions to accelerate towards. Rockets effectively gain a higher (better) fitness the closer they are to the goal (green circle) and lose fitness (worse) if they try and go out of bounds or hit a boundary. In the scope of the genetic algorithm, these fitness scores are used to create the next &amp;ldquo;generation&amp;rdquo; of rocket which favors (not absolute) to combine dna of the top performing rockets.</description>
    </item>
    
    <item>
      <title>Agent-Maze Environment</title>
      <link>https://rayyanshaik.com/blog/agent-maze/</link>
      <pubDate>Sun, 26 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://rayyanshaik.com/blog/agent-maze/</guid>
      <description>Description A project developed by WPS Lakerbotics Programming Team, designed as a testing environment for pathfinding &amp;ldquo;agent&amp;rdquo; algorithms.
Github Repository The Github repository can be found here
What were my goals with this project?  Practice advanced manipulation of 2d arrays Practice GUI efficiency Minimalist and attractive graphics Object-Oriented approach Object reading and writing with pickle library  Project Images       Dependencies  Pygame Numpy Pickle  Agent-Maze-Environment README.</description>
    </item>
    
    <item>
      <title>Perlin Noise Map Generator</title>
      <link>https://rayyanshaik.com/blog/perlinmap/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://rayyanshaik.com/blog/perlinmap/</guid>
      <description>Description A map generating script primarly using the perlin noise equations. This program utilizes a the 2d perlin noise equation to generate topographic values in a 2d list. These values are normalized and assigned a &amp;ldquo;color output&amp;rdquo; depending on their value (for example, a low value would mean blue or water, while a high value might be grey for mountains). This program also uses poisson disc sampling to randomly generate trees across the landmasses.</description>
    </item>
    
    <item>
      <title>Boids Flocking Algorithm</title>
      <link>https://rayyanshaik.com/blog/boids-flocking/</link>
      <pubDate>Sun, 12 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://rayyanshaik.com/blog/boids-flocking/</guid>
      <description>Description My implementation of the boids flocking algorithm in pygame. It uses arrows - representative of birds - as enties that move around and account for each other&amp;rsquo;s positions. Some additional features that I implemented include an &amp;ldquo;infinite border&amp;rdquo; - meaning borders transport entities to opposite ends of the map. The entities also spawn with random hues (color), and when several enities converge into a group, their colors average out. When these groups disband, the entities slowly revert to their original color.</description>
    </item>
    
    <item>
      <title>Lakerbotics 2020 Code</title>
      <link>https://rayyanshaik.com/blog/lakerbotics2020/</link>
      <pubDate>Sun, 08 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://rayyanshaik.com/blog/lakerbotics2020/</guid>
      <description>Description Lakerbotics-1649&amp;rsquo;s robot code, written in java. This code was created from base to suit our robot&amp;rsquo;s needs and the challenge&amp;rsquo;s (Infinite Recharge) demands. Months of testing and research was spent learning the libraries required, and the &amp;ldquo;final version&amp;rdquo; of the robot code was developed over nearly 2 months. I have written the majority of this code (under the Lakerbotics Github account), and the overall project was a group effort with 2 other team members.</description>
    </item>
    
    <item>
      <title>Sorting Visualizer</title>
      <link>https://rayyanshaik.com/blog/sorting-visualizer/</link>
      <pubDate>Sun, 12 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://rayyanshaik.com/blog/sorting-visualizer/</guid>
      <description>Description A project that serves as a visual representation for bubble sort, insertion sort, selection sort, and quick sort.
Github Repository The Github repository can be found here
What were my goals with this project?  Custom buttons Practice writing sorting algorithms Minimalist and attractive graphics Object-Oriented approach  Project Images    Dependencies  Pygame  </description>
    </item>
    
    <item>
      <title>Autoclickr</title>
      <link>https://rayyanshaik.com/blog/autoclickr/</link>
      <pubDate>Fri, 28 Jun 2019 12:39:56 +0100</pubDate>
      
      <guid>https://rayyanshaik.com/blog/autoclickr/</guid>
      <description>Description A complete GUI environment designed to test grid/maze solving algorithms. Complete with a GUI environment builder.
Github Repository The Github repository can be found here
What were my goals with this project?  Create a fast and reliable auto clicker Have the script be easy to use and interact with Make the driver code relatively simple for easy changes  Driver code from autoclickr import Autoclickr mult = int(input(&amp;#34;Scale value (threads to be opened): &amp;#34;)) clicker = Autoclickr(True, 0, &amp;#39;left&amp;#39;, &amp;#39;right&amp;#39;,scaled=mult, clickType=0) clicker.</description>
    </item>
    
    <item>
      <title>Snake Game Environment</title>
      <link>https://rayyanshaik.com/blog/snake-environment/</link>
      <pubDate>Tue, 18 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://rayyanshaik.com/blog/snake-environment/</guid>
      <description>Description A full gui of the classic snake game. This specific version was created for easy implementation of agents/algoriths and ai to &amp;ldquo;play&amp;rdquo; the game. The bar on the right side of the application provides useful development information.
Github Repository The Github repository can be found here
What were my goals with this project?  Practice manipulation of 2d arrays Practice GUI efficiency Minimalist and attractive graphics Future integration with agent code  Project Images    Dependencies  Pygame  </description>
    </item>
    
    <item>
      <title>A* Pathfinding</title>
      <link>https://rayyanshaik.com/blog/astar-pathfinding/</link>
      <pubDate>Wed, 04 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://rayyanshaik.com/blog/astar-pathfinding/</guid>
      <description>Description An implementation of the A* Pathfinding Algorithm. The logic behind this algorithm is based on the function f(n) = g(n) + h(n). Where the total cost of &amp;ldquo;moving&amp;rdquo; is the sum of the cost of the path to the starting node and the cost as calculated by the heuristic function for the cheapest path from the next node to the goal.
Github Repository The Github repository can be found here</description>
    </item>
    
  </channel>
</rss>
